/*
 * {elementName}
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.swathi.assignment.client.api;

import com.swathi.assignment.client.model.CloudFile;
import com.swathi.assignment.client.model.CloudLink;
import com.swathi.assignment.client.model.CloudStorage;
import org.joda.time.DateTime;
import java.io.File;
import com.swathi.assignment.client.model.Metadata;
import com.swathi.assignment.client.model.Pong;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DocumentsApi
 */
@Ignore
public class DocumentsApiTest {

    private final DocumentsApi api = new DocumentsApi();

    
    /**
     * Uploads a file to your endpoint cloud service. If the destination path includes directories that do not exist, they will be created.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFileTest() {
        String authorization = null;
        String path = null;
        File file = null;
        Long size = null;
        List<String> tags = null;
        String description = null;
        Boolean overwrite = null;
        CloudFile response = api.createFile(authorization, path, file, size, tags, description, overwrite);

        // TODO: test validations
    }
    
    /**
     * Copies a file specified by a file path to another file path, leaving the original intact.  If the source file path does not exist an error response is returned.  If the destination path includes directories that do not exist, they will be created.  Copying a file that already exists results in an error response.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFileCopyTest() {
        String authorization = null;
        String path = null;
        CloudFile body = null;
        CloudFile response = api.createFileCopy(authorization, path, body);

        // TODO: test validations
    }
    
    /**
     * Copies a file associated with an ID from a specified file path to another file path, leaving the original intact.  If the source file associated with an ID does not exist an error response is returned.  If the destination path includes directories that do not exist they will be created.  Copying a file that already exists results in an error response.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFileCopy2Test() {
        String authorization = null;
        String id = null;
        CloudFile body = null;
        CloudFile response = api.createFileCopy2(authorization, id, body);

        // TODO: test validations
    }
    
    /**
     * Creates a new folder on your cloud service using its specified path.  Creation of the new folder goes through Cloud Elements.  If the destination path includes directories that do not exist they will be created.  Creating a folder that already exists results in an error response.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFolderTest() {
        String authorization = null;
        CloudFile body = null;
        CloudFile response = api.createFolder(authorization, body);

        // TODO: test validations
    }
    
    /**
     * Copies a folder specified by a file path to another file path, leaving the original intact.  If the source path does not exist an error response is returned.  If the destination path includes directories that do not exist, they will be created.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFolderCopyTest() {
        String authorization = null;
        String path = null;
        CloudFile body = null;
        CloudFile response = api.createFolderCopy(authorization, path, body);

        // TODO: test validations
    }
    
    /**
     * Copies a folder associated with an ID specified by a file path to another file path, leaving the original intact. If the source path does not exist an error response is returned.  If the destination path includes directories that do not exist, they will be created.  Copying a folder that already exists results in an error response.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFolderCopy2Test() {
        String authorization = null;
        String id = null;
        CloudFile body = null;
        CloudFile response = api.createFolderCopy2(authorization, id, body);

        // TODO: test validations
    }
    
    /**
     * Deletes a specific file associated with an ID from your cloud service using its specified path.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFileByIdTest() {
        String authorization = null;
        String id = null;
        Boolean emptyTrash = null;
        api.deleteFileById(authorization, id, emptyTrash);

        // TODO: test validations
    }
    
    /**
     * Deletes a file from your cloud service by its specified path.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFilesTest() {
        String authorization = null;
        String path = null;
        Boolean emptyTrash = null;
        api.deleteFiles(authorization, path, emptyTrash);

        // TODO: test validations
    }
    
    /**
     * Deletes an entire folder associated with an ID from your cloud service.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFolderByIdTest() {
        String authorization = null;
        String id = null;
        Boolean emptyTrash = null;
        api.deleteFolderById(authorization, id, emptyTrash);

        // TODO: test validations
    }
    
    /**
     * Deletes an entire folder from your cloud service by its specified path. The folder specified is deleted from your cloud service.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFoldersTest() {
        String authorization = null;
        String path = null;
        Boolean emptyTrash = null;
        api.deleteFolders(authorization, path, emptyTrash);

        // TODO: test validations
    }
    
    /**
     * Retrieves a specific file associated with an ID from your cloud service from a specified path.  The file is directly streamed from the cloud storage provider through Cloud Elements, and is not buffered to disk.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileByIdTest() {
        String authorization = null;
        String id = null;
        CloudFile response = api.getFileById(authorization, id);

        // TODO: test validations
    }
    
    /**
     * Retrieves a single file from your cloud service from a specified path. The file is directly streamed from the cloud storage provider through Cloud Elements, and is not buffered to disk.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilesTest() {
        String authorization = null;
        String path = null;
        CloudFile response = api.getFiles(authorization, path);

        // TODO: test validations
    }
    
    /**
     * Returns a link that can be used to download the specified file through Cloud Elements.  The link can be used to download the file without providing credentials.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilesLinksTest() {
        String authorization = null;
        String path = null;
        CloudLink response = api.getFilesLinks(authorization, path);

        // TODO: test validations
    }
    
    /**
     * Returns a link associated with an ID that can be used to download the specified file through Cloud Elements.  The link can be used to download the file without providing credentials.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilesLinks2Test() {
        String authorization = null;
        String id = null;
        CloudLink response = api.getFilesLinks2(authorization, id);

        // TODO: test validations
    }
    
    /**
     * Retrieves the metadata from a single file on your cloud service from a specified path.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilesMetadataTest() {
        String authorization = null;
        String path = null;
        Boolean isoDates = null;
        CloudFile response = api.getFilesMetadata(authorization, path, isoDates);

        // TODO: test validations
    }
    
    /**
     * Retrieves specific metadata on a file associated with an ID from your cloud service using its specified path.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilesMetadata2Test() {
        String authorization = null;
        String id = null;
        Boolean isoDates = null;
        CloudFile response = api.getFilesMetadata2(authorization, id, isoDates);

        // TODO: test validations
    }
    
    /**
     * Get a list of CloudFiles that are contained in a specified folder on your cloud service specified by a path.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFoldersContentsTest() {
        String authorization = null;
        String path = null;
        Boolean fetchTags = null;
        Boolean isoDates = null;
        Long pageSize = null;
        Long page = null;
        String nextPage = null;
        List<CloudFile> response = api.getFoldersContents(authorization, path, fetchTags, isoDates, pageSize, page, nextPage);

        // TODO: test validations
    }
    
    /**
     * Retrieves a list of CloudFiles that are contained in a specified folder associated with an ID on your cloud service via a specified path.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFoldersContents2Test() {
        String authorization = null;
        String id = null;
        Boolean fetchTags = null;
        Boolean isoDates = null;
        Long pageSize = null;
        Long page = null;
        String nextPage = null;
        List<CloudFile> response = api.getFoldersContents2(authorization, id, fetchTags, isoDates, pageSize, page, nextPage);

        // TODO: test validations
    }
    
    /**
     * Retrieves specific metadata on a folder from your cloud service using its specified path.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFoldersMetadataTest() {
        String authorization = null;
        String path = null;
        Boolean isoDates = null;
        CloudFile response = api.getFoldersMetadata(authorization, path, isoDates);

        // TODO: test validations
    }
    
    /**
     * Retrieves specific metadata on a folder associated with an ID from your cloud service using its specified path.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFoldersMetadata2Test() {
        String authorization = null;
        String id = null;
        Boolean isoDates = null;
        CloudFile response = api.getFoldersMetadata2(authorization, id, isoDates);

        // TODO: test validations
    }
    
    /**
     * Ping the Element to confirm that the Hub element has a heartbeat.  If the Element does not have a heartbeat, an error message will be returned.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPingTest() {
        String authorization = null;
        Pong response = api.getPing(authorization);

        // TODO: test validations
    }
    
    /**
     * Performs a text search of file names and directory names.  The content of files is not searched.  The search uses substring matching so searching for \&quot;exam\&quot; will match on \&quot;example.txt\&quot;.  Subdirectories are also searched.  The search returns a list of CloudFiles that match search parameters.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSearchTest() {
        String authorization = null;
        String path = null;
        String text = null;
        DateTime startDate = null;
        DateTime endDate = null;
        List<String> tags = null;
        Long pageSize = null;
        Long page = null;
        String nextPage = null;
        List<CloudFile> response = api.getSearch(authorization, path, text, startDate, endDate, tags, pageSize, page, nextPage);

        // TODO: test validations
    }
    
    /**
     * Retrieves the amount of storage available on your cloud service account.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStorageTest() {
        String authorization = null;
        CloudStorage response = api.getStorage(authorization);

        // TODO: test validations
    }
    
    /**
     * Update a file&#39;s metadata (tags and path) associated with a path.  For example, if you had a document that was tagged as operations but needed to be tagged as legal, then you would perform a PATCH to update the tag using the tags JSON array field. The PATCH method can update the name or directory of a file as well as move a file by using the path JSON field. You cannot update the size of a file.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFilesMetadataTest() {
        String authorization = null;
        String path = null;
        Metadata body = null;
        CloudFile response = api.updateFilesMetadata(authorization, path, body);

        // TODO: test validations
    }
    
    /**
     * Update a file&#39;s metadata (tags and path) associated with an ID.  For example, if you had a document that was tagged as operations but needed to be tagged as legal, then you would perform a PATCH to update the tag using the tags JSON array field. The PATCH method can update the name or directory of a file as well as move a file by using the path JSON field. You cannot update the size of a file.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFilesMetadata2Test() {
        String authorization = null;
        String id = null;
        Metadata body = null;
        CloudFile response = api.updateFilesMetadata2(authorization, id, body);

        // TODO: test validations
    }
    
    /**
     * Update a folder&#39;s metadata (path) associated with its path.  For example, if you had a folder that was located in the operations directory, but needed to be moved into the legal directory, then you would perform a PATCH using the path JSON field to update the path. The PATCH method can update the name or directory path of a folder also by using the path JSON field. You cannot update the size of a folder.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFoldersMetadataTest() {
        String authorization = null;
        String path = null;
        Metadata body = null;
        CloudFile response = api.updateFoldersMetadata(authorization, path, body);

        // TODO: test validations
    }
    
    /**
     * Update a folder&#39;s metadata (path) associated with an ID.  For example, if you had the ID of a folder that was located in the operations directory, but needed to be moved into the legal directory, then you would perform a PATCH using the path JSON field to update the path.  The PATCH method can update the name or directory of a folder also by using the path JSON field. You cannot update the size of a folder.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFoldersMetadata2Test() {
        String authorization = null;
        String id = null;
        Metadata body = null;
        CloudFile response = api.updateFoldersMetadata2(authorization, id, body);

        // TODO: test validations
    }
    
}
